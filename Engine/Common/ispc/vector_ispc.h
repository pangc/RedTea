//
// C:/workspace/RedTea/Engine/Common/ispc/vector_ispc.h
// (Header automatically generated by the ispc compiler.)
// DO NOT EDIT THIS FILE.
//

#pragma once
#include <stdint.h>



#ifdef __cplusplus
namespace ispc { /* namespace */
#endif // __cplusplus

#ifndef __ISPC_ALIGN__
#if defined(__clang__) || !defined(_MSC_VER)
// Clang, GCC, ICC
#define __ISPC_ALIGN__(s) __attribute__((aligned(s)))
#define __ISPC_ALIGNED_STRUCT__(s) struct __ISPC_ALIGN__(s)
#else
// Visual Studio
#define __ISPC_ALIGN__(s) __declspec(align(s))
#define __ISPC_ALIGNED_STRUCT__(s) __ISPC_ALIGN__(s) struct
#endif
#endif


///////////////////////////////////////////////////////////////////////////
// Functions exported from ispc code
///////////////////////////////////////////////////////////////////////////
#if defined(__cplusplus) && (! defined(__ISPC_NO_EXTERN_C) || !__ISPC_NO_EXTERN_C )
extern "C" {
#endif // __cplusplus
    extern void Absolute(float * result, const float * a, const uint32_t count);
    extern void AddByElement(const float * a, const float * b, float * result, const uint32_t count);
    extern void CrossProduct2(const float * a, const float * b, float * result);
    extern void CrossProduct3(const float * a, const float * b, float * result);
    extern void DivByElement(const float * a, const float * b, float * result, const uint32_t count);
    extern void DivByElementi16(const int16_t * a, const int16_t * b, int16_t * result, const uint32_t count);
    extern void DivByElementi32(const int32_t * a, const int32_t * b, int32_t * result, const uint32_t count);
    extern void MulByElement(const float * a, const float * b, float * result, const uint32_t count);
    extern void MulByElementi16(const int16_t * a, const int16_t * b, int16_t * result, const uint32_t count);
    extern void MulByElementi32(const int32_t * a, const int32_t * b, int32_t * result, const uint32_t count);
    extern void Normalize(const uint32_t count, float * v, float length);
    extern void SubByElement(const float * a, const float * b, float * result, const uint32_t count);
#if defined(__cplusplus) && (! defined(__ISPC_NO_EXTERN_C) || !__ISPC_NO_EXTERN_C )
} /* end extern C */
#endif // __cplusplus


#ifdef __cplusplus
} /* namespace */
#endif // __cplusplus
